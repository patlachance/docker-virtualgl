{"name":"Docker-virtualgl","tagline":"VirtualGL Server in a Docker Container","body":"# docker-virtualgl\r\nThis is [VirtualGL](http://virtualgl.org) running on docker.\r\nIt includes all 32 bit & 64 bit libraries.\r\n\r\nIt should work out of the box with all Nvidia cards and Nvidia drivers and most other cards as well that use Mesa drivers.\r\nIt is setup to auto adapt to whatever drivers you may have installed as long as they are the most recent ones for your branch.\r\n\r\nOn Docker hub [virtualgl](https://registry.hub.docker.com/u/yantis/virtualgl/)\r\non Github [docker-virtualgl](https://github.com/yantis/docker-virtualgl/)\r\n\r\n\r\n## Description\r\nThe goal of this was a layer between [dynamic-video](https://github.com/yantis/docker-dynamic-video) and graphical applications.\r\nI tested this with Blender, Path of Exile on PlayOnLinux and a few other games and even Steam all on an Amazon EC2.\r\n\r\nIn local mode it should just work out of the box. All you should have to do is run [this](https://github.com/yantis/docker-virtualgl/blob/master/runme-local.sh) script\r\n\r\nI have included a [demo script](https://github.com/yantis/docker-virtualgl/blob/master/tools/aws-virtualgl.sh) that will startup an Amazon EC2 Instance, install docker, run the container and \r\nthen connect to your docker container and run glxspheres64 doing all the rendering on the AWS GPU and outputing it on your local display.\r\n\r\n[Here](https://github.com/yantis/docker-virtualgl/blob/master/tools/remote-virtualgl.sh) is another demo script \r\nthat launches a shell for another machine (ie: on your local network. To use that video card instead of your own \r\nfor whatever application you are using).\r\n\r\nOf course you can use this in local mode as well. I find that stuff just works better on my machine running it through vglrun\r\nthan without it. If you \r\n\r\n\r\n### Docker Images Structure\r\n\r\n>[yantis/archlinux-tiny](https://github.com/yantis/docker-archlinux-tiny)\r\n>>[yantis/archlinux-small](https://github.com/yantis/docker-archlinux-small)\r\n>>>[yantis/archlinux-small-ssh-hpn](https://github.com/yantis/docker-archlinux-ssh-hpn)\r\n>>>>[yantis/ssh-hpn-x](https://github.com/yantis/docker-ssh-hpn-x)\r\n>>>>>[yantis/dynamic-video](https://github.com/yantis/docker-dynamic-video)\r\n>>>>>>[yantis/virtualgl](https://github.com/yantis/docker-virtualgl)\r\n\r\n\r\n## Usage (Local)\r\n\r\nThis example launches the container and initalizes the graphcs with your drivers and in this case\r\nruns glxspheres64.\r\n\r\n```bash\r\nxhost +si:localuser:$(whoami) >/dev/null\r\ndocker run \\\r\n    --privileged \\\r\n    --rm \\\r\n    -ti \\\r\n    -e DISPLAY \\\r\n    -v /tmp/.X11-unix:/tmp/.X11-unix:ro \\\r\n    -u docker \\\r\n    yantis/virtualgl /bin/bash -c \"sudo initalize-graphics >/dev/null 2>/dev/null; vglrun glxspheres64;\"\r\n```\r\n\r\n### Breakdown\r\n\r\n```bash\r\n$ xhost +si:localuser:yourusername\r\n```\r\n\r\nAllows your local user to access the xsocket. Change yourusername or use $(whoami) or $USER if your shell supports it.\r\n\r\n```bash\r\ndocker run \\\r\n    --privileged \\\r\n    --rm \\\r\n    -ti \\\r\n    -e DISPLAY \\\r\n    -v /tmp/.X11-unix:/tmp/.X11-unix:ro \\\r\n    -u docker \\\r\n    yantis/virtualgl /bin/bash -c \"sudo initalize-graphics >/dev/null 2>/dev/null; vglrun glxspheres64;\"\r\n```\r\n\r\nThis follows these docker conventions:\r\n\r\n* `-ti` will run an interactive session that can be terminated with CTRL+C.\r\n* `--rm` will run a temporary session that will make sure to remove the container on exit.\r\n* `-e DISPLAY` sets the host display to the local machines display.\r\n* `-v /tmp/.X11-unix:/tmp/.X11-unix:ro` bind mounts the X11 socks on your local machine to the containers and makes it read only.\r\n* `-u docker` sets the user to docker. (or you could do root as well)\r\n* `yantis/virtualgl /bin/bash -c \"sudo initalize-graphics >/dev/null 2>/dev/null; vglrun glxspheres64;\"`\r\nyou need to initalize the graphics or otherwise it won't adapt to your graphics drivers and may not work.\r\n\r\n\r\n## Usage (Remote)\r\n\r\n### Server\r\n\r\nThe recommended way to run this container looks like this. This example launches the container in the background.\r\nWarning: Do not run this on your primary computer as it will take over your video cards and you will have to shutdown the container\r\nto get them back.\r\n\r\n```bash\r\ndocker run \\\r\n           --privileged \\\r\n           -d \\\r\n           -v /home/user/.ssh/authorized_keys:/authorized_keys:ro \\\r\n           -h docker \\\r\n           -p 49154:22 \\\r\n           yantis/virtualgl\r\n```\r\n\r\nThis follows these docker conventions:\r\n\r\n* `--privileged` run in privileged mode \r\n    If you do not want to run in privliged mode you can mess around with these:\r\n\r\n    AWS\r\n     * --device=/dev/nvidia0:/dev/nvidia0 \\\r\n     * --device=/dev/nvidiactl:/dev/nvidiactl \\\r\n     * --device=/dev/nvidia-uvm:/dev/nvidia-uvm \\\r\n\r\n    OR (Local)\r\n     * --device=/dev/dri/card0:/dev/dri/card0 \\\r\n\r\n* `-d` run in daemon mode\r\n* `-h docker` sets the hostname to docker. (not really required but it is nice to see where you are.)\r\n* `-v $HOME/.ssh/authorized_keys:/authorized_keys:ro` Optionaly share your public keys with the host.\r\n    This is particularlly useful when you are running this on another server that already has SSH. Like an \r\n    Amazon EC2 instance. WARNING: If you don't use this then it will just default to the user pass of docker/docker\r\n    (If you do specify authorized keys it will disable all password logins to keep it secure).\r\n\r\n* `-p 49158:22` port that you will be connecting to.\r\n* `yantis/virtualgl` the default mode is SSH server with the X-Server so no need to run any commands.\r\n\r\n\r\n### Client\r\n\r\nYou will probably want to have VirtualGL installed on your client. On Arch Linux it is:\r\n\r\n```bash\r\npacman -S virtualgl\r\n```\r\nIt is basically two programs you need both of which I have included in the tools directory.\r\n\r\n* SSH Authentication but data stream is unencrypted (recommended)\r\n\r\n```bash\r\nvglconnect -Y docker@hostname -p 49154 -t vglrun glxspheres64\r\n```\r\n\r\n* SSH Authentication AND data stream is unencrypted\r\n\r\n```bash\r\nvglconnect -Y -s docker@hostname -p 49154 -t vglrun glxspheres64\r\n```\r\n\r\nIf you are running this remotely (ie: with an Amazon AWS server) You will want to open up port on your firewall\r\nor router to get the best speed out of this.  Otherwise it will use SSH to encrypt the display which will slow it down a good amount.\r\n(I have had varying degrees of success not opening the port when using the SSH method (Sometimes I have to open up the port period to get it to work.)\r\n\r\nCheck your ports as it doesn't always use 4242 sometimes it uses something else between 4200 and 4300.\r\nIf your screen is black or it isn't drawing then that is a good indication that the port is blocked.\r\n\r\n![](http://yantis-scripts.s3.amazonaws.com/virtualgl_port_forwarding.png)\r\n\r\nvglrun has a lot of tunable parameters. Make sure to check out the manual [here](http://www.virtualgl.org/vgldoc/2_1/)\r\n\r\n\r\n## Examples\r\n\r\nThis is glxspheres64 running on an Amazon GPU EC2 notice the 750+ frames a second.\r\n![](http://yantis-scripts.s3.amazonaws.com/screenshot_20150413-074859.jpg)\r\n\r\nYou should be able to run it with many programs. As an example to use it with [Blender](http://www.blender.org/)\r\n\r\n```bash\r\nvglconnect -Y docker@hostname -p 49154\r\nsudo pacman -Sy blender\r\nvglrun blender -noaudio -nojoystick\r\n```\r\n\r\n![](http://yantis-scripts.s3.amazonaws.com/blender_4_13_2015.png)\r\n","google":"UA-61848149-1","note":"Don't delete this file! It's used internally to help with page regeneration."}